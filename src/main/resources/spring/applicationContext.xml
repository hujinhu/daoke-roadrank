<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	
	default-lazy-init="true">
	
	
	<description>Spring公共配置 </description>
	 
	<!--   定义受环境影响易变的变量 -->
      <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      	<property name="ignoreUnresolvablePlaceholders" value="true" />  
        <property name="locations">  
            <list>
                <value>classpath*:config/jdbc.properties</value>  
                <value>classpath*:config/common.properties</value>
            </list>  
        </property>  
    </bean>
	<util:properties id="apiConfig" location="classpath:config/api_config.properties" />
	<util:properties id="contentConfig" location="classpath:config/content_config.properties" /> 
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="me.daoke.roadrank">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
     <!-- 缓存配置 -->
	 <cache:annotation-driven />
      <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
     <property name="caches"> 
       <set> 
         <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default" /> 
       </set> 
     </property> 
   </bean> 
   <!-- 强制使用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!--公共配置属性 -->
	 <bean id="commonPoolInfo" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
	   <property name="jmxEnabled" value="${Tomcat.jdbc.pool.jmxEnabled}"></property> 
		<property name="testWhileIdle" value="${Tomcat.jdbc.pool.testWhileIdle}"></property>
		<property name="testOnBorrow" value="${Tomcat.jdbc.pool.testOnBorrow}"></property>
		<property name="validationQuery" value="${Tomcat.jdbc.pool.validationQuery.sqlserverOrmysql}"></property>
		<property name="testOnReturn" value="${Tomcat.jdbc.pool.testOnReturn}"></property>
		<property name="validationInterval" value="${Tomcat.jdbc.pool.validationInterval}"></property>
		<property name ="timeBetweenEvictionRunsMillis" value="${Tomcat.jdbc.pool.timeBetweenEvictionRunsMillis}"></property>
		<property name="maxActive" value="${Tomcat.jdbc.pool.maxActive}"></property>
		<property name="initialSize" value="${Tomcat.jdbc.pool.initialSize}"></property>
		<property name="maxWait" value="${Tomcat.jdbc.pool.maxWait}"></property>
		<property name="removeAbandoned" value="${Tomcat.jdbc.pool.removeAbandoned}"></property>
		<property name="removeAbandonedTimeout" value="${Tomcat.jdbc.pool.removeAbandonedTimeout}"></property>
		<property name="logAbandoned" value="${Tomcat.jdbc.pool.logAbandoned}"></property>
		<property name="minEvictableIdleTimeMillis" value="${Tomcat.jdbc.pool.minEvictableIdleTimeMillis}"></property>
		<property name="jdbcInterceptors" value="${Tomcat.jdbc.pool.jdbcInterceptors}"></property> 
	</bean>


	<!--动态数据源  -->
	<bean id="dynamicDataSource"  class="me.daoke.roadrank.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="me.daoke.roadrank.datasource.DataSourceType">
				<entry key="WEME_CAR" value-ref="dataSource_WemeCar"></entry>
				<entry key="LOGIN_CONFIG" value-ref="dataSource_LoginConfig"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_WemeCar"></property>
	</bean>
	<!-- 个人资料数据源 -->
	<bean id="dataSource_WemeCar" parent="commonPoolInfo">
		<property name="driverClassName" value="${JDBC.Driver.WemeCar}" />
		<property name="url" value="${JDBC.ConnectionURL.WemeCar}" />
		<property name="username" value="${JDBC.Username.WemeCar}" />
		<property name="password" value="${JDBC.Password.WemeCar}" />
	</bean>
	<!-- 登陆数据源 -->
	<bean id="dataSource_LoginConfig" parent="commonPoolInfo">
		<property name="driverClassName" value="${JDBC.Driver.LoginConfig}" />
		<property name="url" value="${JDBC.ConnectionURL.LoginConfig}" />
		<property name="username" value="${JDBC.Username.LoginConfig}" />
		<property name="password" value="${JDBC.Password.LoginConfig}" />
	</bean>
	 

	<!--事务管理DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- Spring iBatis SqlMapClient -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="mapperLocations">
       	 <value>classpath:mapper/**/*Mapper.xml</value>
		</property>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- 自动扫描mapper配置和dao映射，无需写mybatis-config.xml -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="me.daoke.roadrank.dao" />
		<!-- 此处不用sqlSessionFactory 是因为和PropertyPlaceholderConfigurer加载顺序冲突 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean id="springContextHolder" class="me.daoke.roadrank.utils.SpringContextHolder" lazy-init="false" />
	
	<!-- 上传文件大小 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>
</beans>
