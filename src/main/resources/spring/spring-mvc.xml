<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 使用CoC,惯例优先原则(convention over configuration)的方式来配置SpringMVC可以帮我们声明Controller的时候省下很多功夫。 
		只要我们的Controller是以XXXController的方式命名的话就可以使用到CoC带来的好处。 例如，对于普通的Controller（非MultiActionController），CoC帮我们做以下的映射： 
		HomeController映射到/home*请求URL -->
	<bean
		class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />
	<!-- 使用annocation创建Controller的bean -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- 自动扫描 -->
	<context:component-scan base-package="me.daoke.roadrank">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
 
	<!-- 强制使用CGLIB代理 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->

	<!-- 注解映射的支持 默认 -->
	<mvc:annotation-driven >
		<mvc:message-converters register-defaults="true" >
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				  <!-- <property name="objectMapper" >
					<bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
						<property name="failOnEmptyBeans" value="false" />
					</bean>
				</property> --> 
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 对静态资源文件的访问方案 默认 -->
	<mvc:default-servlet-handler />
	<mvc:interceptors>
		<!--签名拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/accountLogin/login" /><!-- 登陆不拦截 -->
			<mvc:exclude-mapping path="/validCode/**" />
			<bean class="me.daoke.roadrank.intercepter.SignInterceptor" />
		</mvc:interceptor>
		<bean class="me.daoke.roadrank.intercepter.LoginInterceptor"/>
	</mvc:interceptors>

	 
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10485760" />
		<property name="maxInMemorySize" value="4096" />
		<property name="resolveLazily" value="true" />
	</bean>



	<!-- 定义首页 -->
	<mvc:view-controller path="/" view-name="redirect:/index.html" />

	<!-- 定义JSP -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- end -->

	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
			<property name="exceptionMappings">
				<props>
					<prop key="java.lang.Throwable">error/500</prop>
				</props>
			</property>
	</bean>
 -->  
</beans>
